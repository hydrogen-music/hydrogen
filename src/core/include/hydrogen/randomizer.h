/*
 * Hydrogen
 * Copyright(c) 2002-2008 by Alex >Comix< Cominu [comix@users.sourceforge.net]
 * Humanizer
 * Copyright(c) 2018 by Philipp MÃ¼ller [thegreatwhiteshark@googlemail.com]
 *
 * http://www.hydrogen-music.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY, without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

#ifndef RANDOMIZER_H
#define RANDOMIZER_H

#include <cassert>
#include <cmath>

#define PI             ( 3.1415926536d )
#define PINK_USED_ROWS ( 12 )
#define PINK_MAX_ROWS  ( 30 )
#define PINK_BITS      ( 24 )
#define PINK_SHIFT     ( ( sizeof( long )* 8 ) - PINK_BITS )

namespace H2Core {

class Randomizer {
public:
	// Constructor and destructor
	Randomizer();
	// Functions to create and retrieve an instance of the
	// Randomizer within Hydrogen.
	static Randomizer* create_instance();
	static Randomizer* get_instance();
	//
	////////////// White uniform noise ///////////////////////////
	// Composed generator with a multiplicative linear
	// congruential generator as the outer method and a 64-bit
	// Xorshift method as the inner one.
	unsigned long long int white_uniform_int64();
	// Double precision version of the white noise generator.
	double white_uniform();
	//////////////////////////////////////////////////////////////
	//
	////////////////////// Gaussian white noise //////////////////
	// Box-Muller transformation. The resulting Gaussian random
	// variable will be of mean 0 and of standard deviation
	// `standardDeviation'.
	double white_gaussian( double standardDeviation );
	//////////////////////////////////////////////////////////////
	//
	/////////////////////////// Pink noise ///////////////////////
	// Actual algorithm producing the pink noise.
	float pink( float scale );
	//////////////////////////////////////////////////////////////
	
private:
	static Randomizer* __instance;
	////////////// White uniform noise ///////////////////////////
	// Internal state of the white uniform random number
	// generator.
	unsigned long long int uniformStateInt64;
	//////////////////////////////////////////////////////////////
	//
	////////////////////// Gaussian white noise //////////////////
	// This methods generates two Gaussian-distributed variables
	// out of two uniformly distributed ones. One will be returned
	// and the other stored in this variable to be returned during
	// the next call.
	double gaussianSecondVariable;
	//////////////////////////////////////////////////////////////
	//
	/////////////////////////// Pink noise ///////////////////////
	// Array containing the `PINK_MAX_ROWS' independent white
	// noise sources.
	long rowsPink[ PINK_MAX_ROWS ];
	// Variable holding the sum over all independent white noise
	// sources (used for optimization purposes).
	long runningSumPink;
	// Internal time unit.
	int indexPink;
	// Determines the maximum possible value of `indexPink'.
	int indexMaskPink;
	// Biggest possible value generated by the pink noise source.
	long maxValuePink;
	// Normalization constant to transform the result of type
	// long into float and in the range of -1.0 to +1.0.
	float normalizationPink;
	//////////////////////////////////////////////////////////////
};

};
	
#endif /* RANDOMIZER_H */


