# Appveyor configuration
#
# Cache usage
# -----------
#
# The Appveyor build cache is used for:
#
#   - ccache on Linux and Windows
#   - Howebrew with build prerequisites on macOS
#   - State of /usr with installed prerequisites on Linux
#
# The build cache limit is 1Gb which must be shared amongst all platforms,
# so we must take care about sizes, so we allocate:
#
# Homebrew         256Mb (currently uses about 130Mb)
# Linux /var       256Mb (currently uses about 170Mb)
# Linux ccache     256Mb
# Windows64 ccache 256Mb
#
# 32-bit Windows is not cached since it's not regularly built.
#
# Caching the macOS Homebrew configuration is the single largest
# impact on Appveyor build times, since Howebrew on the Appveyor images
# is very out of date, and some prerequisites require rebuilding.
#
# Since the Homebrew installation is much larger than the
# size of cache that Appveyor allows (1GB per project, shared
# between all configurations), so we cache only objects that
# are new or modified relative to the pre-existing 'clean' VM
# state, using `treestate.py` to compare.
#
# For most build jobs, we just unpack the cached Homebrew on top
# of the existing Homebrew installation.
#
# If the cache is cleaned or out of date, we first record the
# state of the Homebrew installation, then update it and install
# prerequisites, and build a new archive of the current Homebrew
# installation.
#
# Currently the necessary changes, compressed with xz, occupy
# about 170Mb of cache space.
#

environment:
  GENERATOR: "MinGW Makefiles"
  ARTIFACT_BRANCH: master-artifacts
  matrix:

    - job_name: 'Ubuntu 20.04'
      job_group: 'Linux'
      appveyor_build_worker_image: Ubuntu2004

    - job_name: 'OS X'
      job_group: 'Mac OS X'
      appveyor_build_worker_image: macos

    - job_name: 'Windows64'
      job_group: 'Windows'
      MSYS: 'C:\msys64\mingw64'
      MSYS_REPO: 'mingw64/mingw-w64-x86_64'
      BUILD_TYPE: "Release"
      CMAKE_FLAGS: "-DWANT_DEBUG:BOOL=OFF -DWIN64:BOOL=ON"
      appveyor_build_worker_image: Visual Studio 2019
      LIBJACK: libjack64.dll
      OPENSSL_DIR: OpenSSL-Win64
      LIBSSL: libssl-1_1-x64.dll
      LIBCRYPTO: libcrypto-1_1-x64.dll

      CHOCO_ARCH:
      PROGRAM_FILES: "Program Files"

    - job_name: 'Windows32'
      job_group: 'Windows'
      MSYS: 'C:\msys64\mingw32'
      MSYS_REPO: 'mingw-w64-i686'
      BUILD_TYPE: "Release"
      CMAKE_FLAGS: "-DWANT_DEBUG:BOOL=OFF -DWIN64:BOOL=OFF"
      appveyor_build_worker_image: Visual Studio 2019
      LIBJACK: libjack.dll
      OPENSSL_DIR: OpenSSL-Win32
      LIBSSL: libssl-1_1.dll
      LIBCRYPTO: libcrypto-1_1.dll

      CHOCO_ARCH:  --x86
      PROGRAM_FILES: "Program Files (x86)"

build:
  verbosity: detailed

matrix:
  exclude:
    - job_name: Windows32
      branches: "master"

for:
  - 
    matrix:
      only:
        - job_group: 'Linux'

    cache: $HOME/cache_dir

    before_build: |-

      cache_tag=usr_cache # this can be modified to rebuild deps

      cdir=$HOME/cache_dir
      cache_tar=$cdir/$cache_tag.tar
      cache=$cache_tar.xz

      mkdir -p $cdir/ccache
      ln -s $cdir/ccache $HOME/.ccache

      if [ -d $cdir ] && [ -f $cache ]; then
        echo "=== Unpacking cached /var $cache ==="
        (
          cd /
          sudo tar xf $cache
        )
        echo "done"
      else
        echo "=== Building dependencies ==="

        mkdir -p $cdir

        sudo python3 ./treestate.py scan /usr usr.json
        sudo apt-get update
        sudo apt-get install -y clang qt5-default qttools5-dev qttools5-dev-tools libqt5xmlpatterns5-dev libarchive-dev libsndfile1-dev libasound2-dev libjack-jackd2-dev libqt5svg5-dev
        sudo apt-get install -y liblo-dev libpulse-dev libportmidi-dev portaudio19-dev libcppunit-dev liblrdf-dev librubberband-dev ladspa-sdk ccache
        sudo rm /usr/local/bi/doxygen
        ccache -M 256M
        ccache -s

        (
          sudo python3 ./treestate.py updates usr.json /usr > updates
          echo $(wc -l updates) updates
          sudo tar cf $cache_tar -T updates
          sudo nice xz -9 -T0 $cache_tar
          du -h $cache

        ) 2>&1 | sed 's/^/CACHE: /' &
      fi

    build_script: |-
      git submodule init && git submodule update

      CPUS=$(nproc)
      echo "Building with $CPUS cpus"
      mkdir build && cd build && \
        cmake -DWANT_LASH=1 -DWANT_LRDF=1 -DWANT_RUBBERBAND=1 .. \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          && \
        make -j $CPUS

      ccache -s

      wait
      echo "=== Build cache usage is " $( du -h $cdir | tail -1 ) "==="


    test_script: |-

      TMPDIR=/tmp src/tests/tests --appveyor

  - 
    cache: /Users/appveyor/cache_dir
    matrix:
      only:
        - job_group: 'Mac OS X'

    before_build: |-

      ###############################################################
      # Set up macOS dependencies

      export MACOSX_DEPLOYMENT_TARGET=10.12
      sudo ln -s /usr/local /opt/local;

      cache_tag=usr_local_1 # this can be modified to rebuild deps

      cdir=$HOME/cache_dir
      cache_tar=$cdir/$cache_tag.tar
      cache=$cache_tar.xz

      CPUS=$(sysctl -n hw.ncpu)

      if [ -d $cdir ] && [ -f $cache ]; then
        echo "=== Unpacking cached Homebrew $cache ==="
        (
          cd /
          tar xf $cache
        )
        echo "done"
      else
        echo "=== Building dependencies ==="
        echo "Couldn't find cache $cache"
        ls -alrt "$cdir"

        echo "Recording /usr/local state"
        python3 ./treestate.py scan /usr/local usrlocal.json

        brew update
        # Build our own versions of these for macOS 10.12 target systems.
        brew install --build-from-source ./macos/HomebrewFormulae/berkeley-db.rb
        brew install --build-from-source ./macos/HomebrewFormulae/libogg.rb
        brew install --build-from-source ./macos/HomebrewFormulae/libvorbis.rb
        brew install --build-from-source ./macos/HomebrewFormulae/libsndfile.rb

        brew install qt5 libarchive jack pulseaudio cppunit ruby

        # The build environment is now ready for use. We can complete
        # the rest of the process of creating the Homebrew archive
        # during the rest of the build, using idle CPU time. To minimise
        # the amount of space needed for the archive, we compress with
        # xz, which adds only about a minute to the non-cached build.
        (
          echo "=== Creating cache tarball $cache ==="
          echo "Check /usr/local for updates"
          python3 ./treestate.py updates usrlocal.json /usr/local       \
              | fgrep -v .git                                           \
                      > updated_list
          echo Need to record $( wc -l updated_list ) updates

          mkdir -p $cdir
          rm -f $cdir/*
          nice tar cf $cache_tar -T updated_list
          echo nice xz -9 -T$CPUS $cache_tar
          nice xz -9 -T$CPUS $cache_tar
          du -h $cdir
        ) 2>&1 | sed 's/^/CACHE: /' &

      fi

      export CMAKE_PREFIX_PATH="$(brew --prefix qt5)";
      export PKG_CONFIG_PATH="$(brew --prefix libarchive)/lib/pkgconfig";

    build_script: |-
      # fix use of register keyword in jack: https://github.com/jackaudio/jack1/issues/84
      sed -i '' 's/, int register,/, int,/g' /opt/local/include/jack/types.h

      git submodule init && git submodule update

      # Do the build
      (
          mkdir build &&                                                        \
              cd build &&                                                       \
              cmake -DWANT_LASH=1 -DWANT_LRDF=1 -DWANT_RUBBERBAND=1 .. &&       \
              make -j $CPUS
      ) || exit 1

      # Build installation DMG
      (
        cd build
        PATH="$(brew --prefix qt5)/bin:$PATH"
        ../macos/build_dmg.sh -v src/gui/hydrogen.app Hydrogen${PKG_SUFFIX}.dmg

        # deploy dmg only on branch $ARTIFACT_BRANCH
        if [ "$APPVEYOR_REPO_BRANCH" = "$ARTIFACT_BRANCH" ]; then
            appveyor PushArtifact Hydrogen*.dmg -DeploymentName Installer;
        fi
      ) || exit 1


    test_script: |-
      cd build
      TMPDIR=/tmp src/tests/tests --appveyor
      res=$?
      wait
      echo "=== Build cache usage is " $( du -h $cdir | tail -1 ) "==="
      ( exit $res )

  -
    matrix:
      only:
        - job_group: 'Windows'

    cache: '%USERPROFILE%\AppData\Roaming\ccache'
    before_build:
      cmd: |-

          if not %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH% if %job_name%==Windows32 appveyor exit

          set QTDIR=%MSYS%
          set CMAKE_PREFIX_PATH=%QTDIR%
          set PATH=%MSYS%\bin;%PATH%
          set PKG_CONFIG_PATH=%MSYS%\lib\pkgconfig

          cmake --version
          g++ --version
          choco install %CHOCO_ARCH% -y jack

          REM *** Results are ignored since a dependency was not properly installed in 32 bit Windows. But the .dll files required are installed regardless, so we don't care.***

          choco install %CHOCO_ARCH% -y openssl --version=1.1.1.1300 || cmd /c "exit /b 1"

          REM *** Install dependencies ***
          c:\msys64\usr\bin\pacman --noconfirm -S -q %MSYS_REPO%-libarchive
          c:\msys64\usr\bin\pacman --noconfirm -S -q %MSYS_REPO%-libsndfile
          c:\msys64\usr\bin\pacman --noconfirm -S -q %MSYS_REPO%-cppunit
          c:\msys64\usr\bin\pacman --noconfirm -S -q %MSYS_REPO%-portaudio
          c:\msys64\usr\bin\pacman --noconfirm -S -q %MSYS_REPO%-portmidi
          c:\msys64\usr\bin\pacman --noconfirm -S -q %MSYS_REPO%-libwinpthread-git
          REM *** As of 2022-20-09 the package database refresh (-y) is required to get the newest qt package and to avoid a critical bug in less recent ones. In addition, the refresh _must_ take place _after_ installing libwinpthread (which otherwise fails). ***
          c:\msys64\usr\bin\pacman --noconfirm -S -q -y %MSYS_REPO%-qt5
          c:\msys64\usr\bin\pacman --noconfirm -S -q %MSYS_REPO%-ladspa-sdk
          c:\msys64\usr\bin\pacman --noconfirm -S -q %MSYS_REPO%-ccache

          ccache -M 256M
          ccache -s

          REM *** INIT SUBMODULES ***
          git submodule init
          git submodule update

          REM *** Configure build ***
          rename "C:\Program Files\Git\usr\bin\sh.exe" "sh2.exe"
          mkdir build
          cd build
          cmake -G "%GENERATOR%" -DCMAKE_BUILD_TYPE=%BUILD_TYPE% %CMAKE_FLAGS% -DJACK_INCLUDE_DIRS="c:/%PROGRAM_FILES%/JACK2/include" -DJACK_LIBRARIES="c:/%PROGRAM_FILES%/JACK2/lib/%LIBJACK%.a" -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ..

    build_script:
      - cmd: |-
          if not %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH% if %job_name%==Windows32 exit

          REM *** Build ***
          set VERBOSE=1
          cmake --build . -j %NUMBER_OF_PROCESSORS%

          REM *** Run tests and report results ***
          set H2_HOME=%APPVEYOR_BUILD_FOLDER%
          echo %H2_HOME%
          SET CORE_PATH=%cd%\src\core
          echo %CORE_PATH%
          set PATH=%CORE_PATH%;%PATH%
          src\tests\tests.exe --appveyor || cmd /c "exit /b 1"
          7z a %APPVEYOR_BUILD_FOLDER%\testresults.zip %TEMP%\hydrogen || cmd /c "exit  /b 1"
          if %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH% appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\testresults.zip

          mkdir %APPVEYOR_BUILD_FOLDER%\build\windows\extralibs

          REM *** Deploy Qt ***
          %QTDIR%\bin\windeployqt.exe -xmlpatterns --no-patchqt --dir %APPVEYOR_BUILD_FOLDER%\build\windows\extralibs src/gui/hydrogen.exe

          REM *** Deploy other libraries ***
          set PYTHON=C:\Python38\python
          %PYTHON% -m pip install -r %APPVEYOR_BUILD_FOLDER%\windows\ci\requirements.txt
          %PYTHON% %APPVEYOR_BUILD_FOLDER%\windows\ci\copy_thirdparty_dlls.py --no-overwrite -V info -L %MSYS%\bin -d %APPVEYOR_BUILD_FOLDER%\build\windows\extralibs src/gui/hydrogen.exe src/core/libhydrogen-core-1.1.1.dll

          REM Chocolatey installs JACK dlls in c:\Windows, so
          REM copy_third_party_libs.py thinks it's a system lib and
          REM won't copy it.
          copy c:\Windows\%LIBJACK% %APPVEYOR_BUILD_FOLDER%\build\windows\extralibs
          copy c:\%OPENSSL_DIR%\%LIBSSL% %APPVEYOR_BUILD_FOLDER%\build\windows\extralibs
          copy c:\%OPENSSL_DIR%\%LIBCRYPTO% %APPVEYOR_BUILD_FOLDER%\build\windows\extralibs

          REM *** Build installer ***
          cpack -G NSIS -v

          REM *** Run and verify installer ***
          set INSTDIR=C:\hydrogen
          mkdir %INSTDIR%
          FOR %%F IN (Hydrogen-*.exe) DO %%F /S /D=%INSTDIR%
          %PYTHON% -m pytest %APPVEYOR_BUILD_FOLDER%\windows\ci\test_installation.py --junitxml=test_installation.xml

          ccache -s

on_finish:
  - cmd: if %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH%  appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\build\CMakeCache.txt
  - cmd: if %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH%  appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\build\CMakeFiles\CMakeOutput.log
  - cmd: if %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH%  appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\build\CMakeFiles\CMakeError.log
  - cmd: if %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH% if not %job_name%==Windows32  appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\build\Hydrogen-1.1.1-win64.exe || cmd /c "exit /b 1"
  - cmd: if %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH% if %job_name%==Windows32  appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\build\Hydrogen-1.1.1-win32.exe || cmd /c "exit /b 1"


  - cmd: |
      if %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH% curl -F file=@%APPVEYOR_BUILD_FOLDER%\build\test_installation.xml https://ci.appveyor.com/api/testresults/junit/%APPVEYOR_JOB_ID%
